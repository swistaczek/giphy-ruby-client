=begin
#giphy-api

#Giphy's public api.

OpenAPI spec version: 0.9.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for GiphyClient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = GiphyClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instact of DefaultApi' do
      expect(@instance).to be_instance_of(GiphyClient::DefaultApi)
    end
  end

  # unit tests for gifs_categories_category_get
  # Category Tags Endpoint.
  # Returns a list of tags for a given category. NOTE &#x60;limit&#x60; and &#x60;offset&#x60; must both be set; otherwise they&#39;re ignored.
  # @param api_key Giphy API Key.
  # @param category Filters results by category.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of records to return.
  # @option opts [Integer] :offset An optional results offset. Defaults to 0.
  # @return [InlineResponse2004]
  describe 'gifs_categories_category_get test' do
    it "should work" do
      resp = @instance.gifs_categories_category_get("dc6zaTOxFJmzC", "actions", {limit: 10, offset: 0})
      expect(resp.data.count).to eq(10)
      resp.data.each do |item|
        expect(item.name).to_not be_empty
      end
    end
  end

  # unit tests for gifs_categories_category_tag_get
  # Tagged Gifs Endpoint.
  # Returns a list of gifs for a given tag (alias to &#x60;/gif/search&#x60;).
  # @param api_key Giphy API Key.
  # @param category Filters results by category.
  # @param tag Filters results by tag.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of records to return.
  # @option opts [Integer] :offset An optional results offset. Defaults to 0.
  # @return [InlineResponse2005]
  describe 'gifs_categories_category_tag_get test' do
    it "should work" do
      resp = @instance.gifs_categories_category_tag_get("dc6zaTOxFJmzC", "actions", "breaking-up", {limit: 10, offset: 0})
      expect(resp.data.count).to eq(10)
      resp.data.each do |item|
        expect(item.url).to_not be_empty
      end
    end
  end

  # unit tests for gifs_categories_get
  # Categories Endpoint.
  # Returns a list of categories.
  # @param api_key Giphy API Key.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of records to return.
  # @return [InlineResponse2003]
  describe 'gifs_categories_get test' do
    it "should work" do
      resp = @instance.gifs_categories_get("dc6zaTOxFJmzC", {limit: 10})
      expect(resp.data.count).to eq(10)
      resp.data.each do |item|
        expect(item.name).to_not be_empty
        expect(item.name_encoded).to_not be_empty
      end
    end
  end

  # unit tests for gifs_get
  # Get GIFs by ID Endpoint
  # A multiget version of the get GIF by ID endpoint.
  # @param api_key Giphy API Key.
  # @param ids Filters results by specified GIF IDs, separated by commas.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  describe 'gifs_get test' do
    it "should work" do
      resp = @instance.gifs_get("dc6zaTOxFJmzC", "YfCuW2maPixri,BeL3iFbYzAsfu")
      expect(resp.data.count).to eq(2)
    end
  end

  # unit tests for gifs_gif_id_get
  # Get GIF by ID Endpoint
  # Returns a GIF given that GIF&#39;s unique ID
  # @param api_key Giphy API Key.
  # @param gif_id Filters results by specified GIF ID.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'gifs_gif_id_get test' do
    it "should work" do
      resp = @instance.gifs_gif_id_get("dc6zaTOxFJmzC", "YfCuW2maPixri")
      expect(resp.data.id).to eq("YfCuW2maPixri")
    end
  end

  # unit tests for gifs_random_get
  # Random Endpoint
  # Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
  # @param api_key Giphy API Key.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :tag Filters results by specified tag.
  # @option opts [String] :rating Filters results by specified rating.
  # @option opts [String] :fmt Used to indicate the expected response format. Default is Json.
  # @return [InlineResponse2002]
  describe 'gifs_random_get test' do
    it "should work" do
      resp = @instance.gifs_random_get("dc6zaTOxFJmzC")
      expect(resp.data.url).to_not be_empty
    end
  end

  # unit tests for gifs_search_get
  # Search Endpoint
  # Search all Giphy GIFs for a word or phrase. Punctuation will be stripped and ignored. Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho.
  # @param api_key Giphy API Key.
  # @param q Search query term or prhase.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of records to return.
  # @option opts [Integer] :offset An optional results offset. Defaults to 0.
  # @option opts [String] :rating Filters results by specified rating.
  # @option opts [String] :lang Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages &lt;a href &#x3D; \&quot;../language-support\&quot;&gt;here&lt;/a&gt;.
  # @option opts [String] :fmt Used to indicate the expected response format. Default is Json.
  # @return [InlineResponse200]
  describe 'gifs_search_get test' do
    it "should work" do
      resp = @instance.gifs_search_get("dc6zaTOxFJmzC", "cats", {limit: 10})
      expect(resp.data.count).to eq(10)
      resp.data.each do |item|
        expect(item.url).to_not be_empty
      end
    end
  end

  # unit tests for gifs_translate_get
  # Translate Endpoint
  # The translate API draws on search, but uses the Giphy &#x60;special sauce&#x60; to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
  # @param api_key Giphy API Key.
  # @param s Search term.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'gifs_translate_get test' do
    it "should work" do
      resp = @instance.gifs_translate_get("dc6zaTOxFJmzC", "cats")
      expect(resp.data.url).to_not be_empty
    end
  end

  # unit tests for gifs_trending_get
  # Trending GIFs Endpoint
  # Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team. The data returned mirrors the GIFs showcased on the &lt;a href &#x3D; \&quot;http://www.giphy.com\&quot;&gt;GIPHY homepage&lt;/a&gt;. Returns 25 results by default.
  # @param api_key Giphy API Key.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of records to return.
  # @option opts [String] :rating Filters results by specified rating.
  # @option opts [String] :fmt Used to indicate the expected response format. Default is Json.
  # @return [InlineResponse200]
  describe 'gifs_trending_get test' do
    pending do 
      it "should work" do
        resp = @instance.gifs_trending_get("dc6zaTOxFJmzC", {limit: 10})
        expect(resp.data.count).to eq(10)
        resp.data.each do |item|
          expect(item.url).to_not be_empty
        end
      end
    end
  end

  # unit tests for stickers_random_get
  # Random Sticker Endpoint
  # Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
  # @param api_key Giphy API Key.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :tag Filters results by specified tag.
  # @option opts [String] :rating Filters results by specified rating.
  # @option opts [String] :fmt Used to indicate the expected response format. Default is Json.
  # @return [InlineResponse2002]
  describe 'stickers_random_get test' do
    it "should work" do
      resp = @instance.stickers_random_get("dc6zaTOxFJmzC")
      expect(resp.data.url).to_not be_empty
    end
  end

  # unit tests for stickers_search_get
  # Sticker Search Endpoint
  # Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs.
  # @param api_key Giphy API Key.
  # @param q Search query term or prhase.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of records to return.
  # @option opts [Integer] :offset An optional results offset. Defaults to 0.
  # @option opts [String] :rating Filters results by specified rating.
  # @option opts [String] :lang Specify default country for regional content; use a 2-letter ISO 639-1 country code. See list of supported languages &lt;a href &#x3D; \&quot;../language-support\&quot;&gt;here&lt;/a&gt;.
  # @option opts [String] :fmt Used to indicate the expected response format. Default is Json.
  # @return [InlineResponse200]
  describe 'stickers_search_get test' do
    it "should work" do
      resp = @instance.stickers_search_get("dc6zaTOxFJmzC", "cats", {limit: 10})
      expect(resp.data.count).to eq(10)
      resp.data.each do |item|
        expect(item.url).to_not be_empty
      end
    end
  end

  # unit tests for stickers_translate_get
  # Sticker Translate Endpoint
  # The translate API draws on search, but uses the Giphy &#x60;special sauce&#x60; to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
  # @param api_key Giphy API Key.
  # @param s Search term.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'stickers_translate_get test' do
    it "should work" do
      resp = @instance.gifs_translate_get("dc6zaTOxFJmzC", "cats")
      expect(resp.data.url).to_not be_empty
    end
  end

  # unit tests for stickers_trending_get
  # Trending Stickers Endpoint
  # Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team. The data returned mirrors the GIFs showcased on the &lt;a href &#x3D; \&quot;http://www.giphy.com\&quot;&gt;GIPHY homepage&lt;/a&gt;. Returns 25 results by default.
  # @param api_key Giphy API Key.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of records to return.
  # @option opts [String] :rating Filters results by specified rating.
  # @option opts [String] :fmt Used to indicate the expected response format. Default is Json.
  # @return [InlineResponse200]
  describe 'stickers_trending_get test' do
    it "should work" do
      resp = @instance.stickers_trending_get("dc6zaTOxFJmzC", {limit: 10})
      expect(resp.data.count).to eq(10)
      resp.data.each do |item|
        expect(item.url).to_not be_empty
      end
    end
  end
end
